{"mode":"Text","textContent":"vexcode_brain_precision = 0:\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmyVariable = 0\n\ndef when_started1():\n    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    if potentiometer_a.angle(DEGREES) > 0:\n        Piston1.set(True)\n        drivetrain.drive_for(REVERSE, 24, INCHES)\n        drivetrain.turn_for(RIGHT, 45, DEGREES)\n        drivetrain.drive_for(REVERSE, 44, INCHES)\n        drivetrain.turn_for(LEFT, 145, DEGREES)\n        drivetrain.drive_for(REVERSE, 40, INCHES)\n        drivetrain.drive_for(FORWARD, 8, INCHES)\n        Piston1.set(False)\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n        drivetrain.drive_for(REVERSE, 48, INCHES)\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n        drivetrain.drive_for(REVERSE, 32, INCHES)\n    if potentiometer_a.angle(DEGREES) < 0:\n        drivetrain.set_drive_velocity(40, PERCENT)\n        drivetrain.set_turn_velocity(20, PERCENT)\n        drivetrain.drive_for(REVERSE, 48, INCHES)\n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n        drivetrain.drive_for(REVERSE, 5, INCHES)\n        drivetrain.drive_for(FORWARD, 5, INCHES)\n        drivetrain.turn_for(RIGHT, 100, DEGREES)\n        drivetrain.drive_for(REVERSE, 40, INCHES)\n        drivetrain.turn_for(LEFT, 45, DEGREES)\n        Lift.spin(FORWARD)\n    if potentiometer_a.angle(PERCENT) == 0:\n        drivetrain.drive_for(FORWARD, 48, INCHES)\n\ndef onauton_autonomous_0():\n    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    pass\n\ndef ondriver_drivercontrol_0():\n    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    drivetrain.set_turn_velocity(100, PERCENT)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    Lift.set_velocity(100, PERCENT)\n    Lift.set_max_torque(100, PERCENT)\n    flywheel.set_max_torque(100, PERCENT)\n    flywheel.set_velocity(100, PERCENT)\n    while True:\n        Lift.set_stopping(HOLD)\n        if controller_1.buttonL2.pressing():\n            Lift.spin(FORWARD)\n        if controller_1.buttonL1.pressing():\n            Lift.spin(REVERSE)\n        if not (controller_1.buttonL1.pressing() or controller_1.buttonL2.pressing()):\n            Lift.stop()\n        if controller_1.buttonUp.pressing():\n            flywheel.spin(REVERSE)\n        if controller_1.buttonDown.pressing():\n            flywheel.spin(FORWARD)\n        if controller_1.buttonRight.pressing():\n            flywheel.stop()\n        if controller_1.buttonR1.pressing():\n            Piston1.set(True)\n            Piston2.set(True)\n        if not controller_1.buttonR1.pressing():\n            Piston1.set(False)\n            Piston2.set(False)\n        wait(5, MSEC)\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\nwhen_started1()\n","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}